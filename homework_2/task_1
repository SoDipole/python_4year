import re
from pattern.web import Wikipedia, plaintext
from collections import Counter

class WikiParser:
    def __init__(self):
        pass
    def get_articles(self, start):
        articles = []
        start_article = Wikipedia().article(start)
        for link in start_article.links:
            article = Wikipedia().article(link)
            if article:
                sections = []
                for section in article.sections:
                    text = plaintext(section.source).lower()
                    text = self.__parce_text(text)
                    sections.append(text)
                articles.append(" ".join(sections))
            break
        return articles
    
    def __parce_text(self, text):
        parced_text = re.sub("\[.+?\]", " ", text)
        parced_text = re.sub("[^\w\s]|\d|\n", " ", parced_text)
        parced_text = re.sub("\s{2,}", " ", parced_text)
        parced_text = re.sub("(^\s)|(\s$)", "", parced_text)
        return parced_text

class TextStatistics:
    def __init__(self, articles):
        self.articles = articles
    
    def get_top_3grams(self, n):
        ngrams = Counter()
        for text in self.articles:
            tokens = text.split()
            ngrams.update([" ".join(tokens[i:i+3]) for i in xrange(len(tokens)-2)])
        ngrams_list = []
        ngrams_freq = []
        for ngram, freq in ngrams.most_common()[:n]:
            ngrams_list.append(ngram)
            ngrams_freq.append(freq)
        return (ngrams_list, ngrams_freq)
    
    def get_top_words(self, n):
        stop_list = ["the", "a", "an", "on", "in", "at", "since", "for", "ago", 
                         "before", "to", "past", "to", "till", "by", "beside", "under", 
                         "below", "over", "above", "across", "through", "into", "towards", 
                         "onto", "from", "of", "off", "until"]        
        words = Counter()
        for text in self.articles:
            tokens = text.split()
            words.update([token for token in tokens if token not in stop_list])
        words_list = []
        words_freq = []
        for word, freq in words.most_common()[:n]:
            words_list.append(word)
            words_freq.append(freq)
        return (words_list, words_freq)
    
class Experiment:
    def __init___(self):
        pass
